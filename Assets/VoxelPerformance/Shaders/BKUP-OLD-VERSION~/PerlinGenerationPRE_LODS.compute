// // VoxelPerformance/Shaders/PerlinGeneration.compute
// // Portions of the following shader program having to do with Perlin Noise are licensed as described below.
// // All other sections are Copyright 2016 Charles Griffiths

// #pragma kernel PerlinMapGen

// #include "ChunkConstants.cginc"
// #include "3dNoise/noiseSimplex.cginc"

// float3 MapOffset;


// RWStructuredBuffer<uint> MapVoxels;
// RWStructuredBuffer<int> MapHeights;


// #define ARBITRARY_SHIFT3 float3(0, 0, 0)

// float Perlin2D(float2 P);



// uint generateVoxel(int y, int height)
// {
// 	if (y > height) return 0;  // air

// 	if (y > 45) return 1;  // grass

// 	if (y < 40) return 2;  // rock

// 	return 3;  // sand
// }

// #define THREEDNOISE

// #ifdef THREEDNOISE


// uint noiseToVoxel(float n) 
// {
// #ifdef TEST_ALWAYS_A_VOXEL
// 	return 1;
// #else
// 	return (n < -.3); // grass
// #endif
// }

// [numthreads(CHUNK_THREADS_X, CHUNK_NOISE_THREADS_Y, CHUNK_THREADS_Z)]
// void PerlinMapGen(uint3 dtid : SV_DispatchThreadID)
// {
// 	int column = dtid.z * CHUNK_DIM_Z + dtid.x; 

// 	float3 P3 = MapOffset + dtid;
// 	float n;
// 	int terrainHeight = 0;

// 	uint voxels = 0;

// 	for (int j = 0; j < 4; j++)
// 	{
// 		P3.y = MapOffset.y + dtid.y * 4 + j - SEA_LEVEL; 

// 		n = snoise(P3 / NOISE_INPUT_DIVISOR + ARBITRARY_SHIFT3);
// 		n = P3.y / (BEDROCK_TO_MAX - SEA_LEVEL) + n;

// 		// uint voxel = (length(dtid - uint3(CHUNK_DIM_X, CHUNK_DIM_Y, CHUNK_DIM_Z)/2) < CHUNK_DIM_Z / 3); // SPHERES 
// 		uint voxel = noiseToVoxel(n); // generateVoxel(i * 4 + j, height) % 256;

// 		voxels *= 256;
// 		voxels += voxel;

// 		terrainHeight = (voxel > 0) * (dtid.y * 4 + j) + (voxel < 1) * terrainHeight;
// 	}

// 	MapVoxels[column*MAP_DATA_DIM_Y + dtid.y] = voxels;

// 	// we don't need this
// 	//MapHeights[column] = max(MapHeights[column], terrainHeight); //no terrainHeight

// }

// [numthreads(CHUNK_THREADS_X, CHUNK_THREADS_Y, CHUNK_THREADS_Z)]
// void PerlinMapGenNOTEIGHT(uint3 dtid : SV_DispatchThreadID) // uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
// {
// 	// tid is { 0..31, 0, 0..31 }
// 	// gid is { 0..7, 0, 0..7 }

// 	int column = dtid.z * CHUNK_DIM_Z + dtid.x; // (gid.z * CHUNK_THREADS_Z + tid.z) * CHUNK_DIM_Z + gid.x * CHUNK_THREADS_X + tid.x;

// 	float3 P3 = MapOffset + dtid; // float3(gid.x * CHUNK_THREADS_X, gid.y * CHUNK_THREADS_Y, gid.z * CHUNK_THREADS_Z) + tid;
// 	float n;
// 	int terrainHeight = 0;

// 	for (int i = 0; i < MAP_DATA_DIM_Y; i++)
// 	{
// 		uint voxels = 0;

// 		for (int j = 0; j < 4; j++)
// 		{
// 			P3.y = MapOffset.y + dtid.y + i * 4 + j - SEA_LEVEL; // float3(P.x, i * 4 + j, P.y); //TODO: account for y offset

// 			n = snoise(P3 / 151.0 + ARBITRARY_SHIFT3);
// 			n = P3.y / (BEDROCK_TO_MAX - SEA_LEVEL) + n;

// 			uint voxel = noiseToVoxel(n); // generateVoxel(i * 4 + j, height) % 256;

// 			voxels *= 256;
// 			voxels += voxel;

// 			terrainHeight = (voxel > 0) * (i * 4 + j) + (voxel < 1) * terrainHeight;
// 			//if (voxel != 0) terrainHeight = i*4+j;
// 		}

// 		MapVoxels[column*MAP_DATA_DIM_Y + i] = voxels;
// 	}

// 	MapHeights[column] = terrainHeight; //no terrainHeight

// }


// //[numthreads(32,1,32)]
// [numthreads(CHUNK_THREADS_X, CHUNK_THREADS_Y, CHUNK_THREADS_Z)]
// void PerlinMapGen(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
// {
// 	// tid is { 0..31, 0, 0..31 }
// 	// gid is { 0..7, 0, 0..7 }

// 	int column = (gid.z * CHUNK_THREADS_Z + tid.z) * CHUNK_DIM_Z + gid.x * CHUNK_THREADS_X + tid.x;

// 	float3 P3 = MapOffset + float3(gid.x * CHUNK_THREADS_X, gid.y * CHUNK_THREADS_Y, gid.z * CHUNK_THREADS_Z) + tid;
// 	float n;
// 	int terrainHeight = 0;

// 	for (int i = 0; i < MAP_DATA_DIM_Y; i++)
// 	{
// 		uint voxels = 0;

// 		for (int j = 0; j < 4; j++)
// 		{
// 			P3.y = MapOffset.y + gid.y * CHUNK_THREADS_Y + tid.y + i * 4 + j - SEA_LEVEL; // float3(P.x, i * 4 + j, P.y); //TODO: account for y offset

// 			n = snoise(P3 / 151.0 + ARBITRARY_SHIFT3);
// 			n = P3.y / (BEDROCK_TO_MAX - SEA_LEVEL) + n;

// 			uint voxel = noiseToVoxel(n); // generateVoxel(i * 4 + j, height) % 256;

// 			voxels *= 256;
// 			voxels += voxel;

// 			terrainHeight = (voxel > 0) * (i * 4 + j) + (voxel < 1) * terrainHeight;
// 			//if (voxel != 0) terrainHeight = i*4+j;
// 		}

// 		MapVoxels[column*MAP_DATA_DIM_Y + i] = voxels;
// 	}

// 	MapHeights[column] = terrainHeight; //no terrainHeight

// }



// #else

// void generateMapColumn(int column, int height)
// {
// 	int terrainHeight = 0;

// 	for (int i = 0; i < 64; i++)
// 	{
// 		uint voxels = 0;

// 		for (int j = 0; j < 4; j++)
// 		{
// 			uint voxel = generateVoxel(i * 4 + j, height) % 256;

// 			voxels *= 256;
// 			voxels += voxel;

// 			if (voxel != 0) terrainHeight = i * 4 + j;
// 		}

// 		MapVoxels[column * 64 + i] = voxels;
// 	}

// 	MapHeights[column] = terrainHeight;
// }

// [numthreads(32, 1, 32)]
// void PerlinMapGen(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID)
// {
// 	// tid is { 0..31, 0, 0..31 }
// 	// gid is { 0..7, 0, 0..7 }
// 	float2 P = MapOffset.xz + tid.xz + 32 * gid.xz;
// 	int column = (gid.z * 32 + tid.z) * 256 + gid.x * 32 + tid.x;

// 	//TODO: try with snoise (2d); see if any allocation problems
// 	float mountain = 100 * Perlin2D(P / 314);
// 	float ocean = 75 * Perlin2D(P / 777);

// 	float height = clamp(40 + mountain - ocean, 0, 255);

// 	generateMapColumn(column, (int)floor(height));
// }

// #endif


// float Perlin2D(float2 P)
// {
// 	P = P * 2 + float2(5000, 5000);

// 	//  https://github.com/BrianSharpe/Wombat/blob/master/Perlin2D.glsl

// 	// establish our grid cell and unit position
// 	float2 Pi = floor(P);
// 	float4 Pf_Pfmin1 = P.xyxy - float4(Pi, Pi + 1.0);

// 	// calculate the hash
// 	float4 Pt = float4(Pi.xy, Pi.xy + 1.0);

// 	Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
// 	Pt += float2(26.0, 161.0).xyxy;
// 	Pt *= Pt;
// 	Pt = Pt.xzxz * Pt.yyww;

// 	float4 hash_x = frac(Pt * (1.0 / 951.135664));
// 	float4 hash_y = frac(Pt * (1.0 / 642.949883));

// 	// calculate the gradient results
// 	float4 grad_x = hash_x - 0.49999;
// 	float4 grad_y = hash_y - 0.49999;
// 	float4 grad_results = rsqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);

// 	// Classic Perlin Interpolation
// 	grad_results *= 1.4142135623730950488016887242097;  // scale things to a strict -1.0->1.0 range  *= 1.0/sqrt(0.5)

// 	float2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
// 	float4 blend2 = float4(blend, float2(1.0 - blend));

// 	return dot(grad_results, blend2.zxzx * blend2.wwyy);
// }




// /// Portions of the above program are derived from code that is licensed as follows:
// // Perlin Noise Functions --

// //
// //	Code repository for GPU noise development blog
// //	http://briansharpe.wordpress.com
// //	https://github.com/BrianSharpe
// //
// //	I'm not one for copyrights.  Use the code however you wish.
// //	All I ask is that credit be given back to the blog or myself when appropriate.
// //	And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)
// //	Thanks!
// //
// //	Brian Sharpe
// //	brisharpe CIRCLE_A yahoo DOT com
// //	http://briansharpe.wordpress.com
// //	https://github.com/BrianSharpe
// //

