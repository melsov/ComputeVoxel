// VoxelPerformance/Shaders/PerlinGeneration.compute
// Portions of the following shader program having to do with Perlin Noise are licensed as described below.
// All other sections are Copyright 2016 Charles Griffiths

#pragma kernel PerlinMapGen

#pragma kernel ClearMapBuffers

#include "ChunkConstants.cginc"
#include "3dNoise/noiseSimplex.cginc"
#include "VoxelHelper.cginc"

#include "TerrainGeneration.cginc"

float3 MapOffset; 


RWStructuredBuffer<uint> MapVoxels;
//LOD Data
RWStructuredBuffer<uint> MapVoxelsLOD2;
RWStructuredBuffer<uint> MapVoxelsLOD4;

// RWStructuredBuffer<int> MapHeights;


#define ARBITRARY_SHIFT3 float3(0, 0, 0)

float Perlin2D(float2 P);





uint testShape(uint3 dtid) 
{
	float3 chunkPos = MapOffset / CHUNK_DIM_X;

#ifdef TEST_CHUNK_SELECT_EVEN_COORDS
	float3 even = fmod(chunkPos, 2);
	if(even.x > .1 || even.y > .1 || even.z > .1) { return 0; }
#endif

#ifdef TEST_SHAPE_RAMP
	return (dtid.x + dtid.y > CHUNK_DIM_X + chunkPos.x + chunkPos.z);
#elif TEST_SHAPE_ONE_IN_CORNER
	return (dtid.x + dtid.y + dtid.z == 0);
#endif

#ifdef TEST_SHAPE_EMPTY
	return (0);
#endif

#ifdef TEST_SHAPE_WALLX0
	return dtid.x == 0;
#endif

#ifdef TEST_SHAPE_SPHERE2C
	float3 gpos = MapOffset + dtid;
	float chunkRad = 2;
	gpos = abs(fmod(gpos, CHUNK_DIM_X * chunkRad) - CHUNK_DIM_X * chunkRad / 2);
	return length(gpos) < (CHUNK_DIM_X * chunkRad / 2 * .8);
#endif

}

uint noiseToVoxel(float n) 
{
#ifdef TEST_ALWAYS_A_VOXEL
	return 1;
#else
	return EmptyVoxel + (n < -.3); // grass
#endif
}


int getLODIndex(uint3 i3, int lod) 
{
	uint3 iLOD4 = i3 / lod; 
	int index = (iLOD4.x * CHUNK_DIM_Y / lod + iLOD4.y) * CHUNK_DIM_Z / lod + iLOD4.z;
	return index;
}

#define USE_TERRAIN_GEN

//
// 'PerlinMapGen' should be 'SimplexMapGen' (switched to simplex noise).
// See TerrainGeneration.cginc.
//
[numthreads(CHUNK_THREADS_X, CHUNK_NOISE_THREADS_Y, CHUNK_THREADS_Z)]
void PerlinMapGen(uint3 dtid : SV_DispatchThreadID)
{

	float3 P3 = MapOffset + dtid;
	float n;
	float inputSkew;
	uint voxels = 0;

	for (int j = 0; j < 4; j++)
	{

		#ifndef TEST_SHAPE_NONE

		uint3 testCoord = dtid;
		testCoord.y = testCoord.y * 4 + j;
		uint voxel = testShape(testCoord); 

		#else

// #ifdef USE_TERRAIN_GEN

		P3.y = MapOffset.y + dtid.y * 4 + j;
		VoxelData vdata = Voxel(P3);
		uint voxel = vdata.type;
// #else

		// P3.y = MapOffset.y + dtid.y * 4 + j - SEA_LEVEL; 
		// inputSkew = snoise(P3.xz / (NOISE_INPUT_DIVISOR.xz * .1) + 300000);
		// n = snoise((P3) / (NOISE_INPUT_DIVISOR - inputSkew * NOISE_INPUT_DIVISOR * .1) + ARBITRARY_SHIFT3);
		// n = P3.y / (BEDROCK_TO_MAX - SEA_LEVEL) + n;
		// uint voxel = noiseToVoxel(n);

		#endif

		//
		//Set LOD 2 and 4 data
		//
		if(voxel != EmptyVoxel) 
		{
			uint3 i3 = dtid;
			i3.y = i3.y * 4 + j;
			int index;

			index = getLODIndex(i3, 4);
			MapVoxelsLOD4[index] = encodeVoxelPosition(voxel, i3); 

			index = getLODIndex(i3, 2);
			MapVoxelsLOD2[index] = encodeVoxelPosition(voxel, i3);
		}
		//End LODs


		voxels *= 256;
		voxels += voxel;
	}

	MapVoxels[(dtid.z * CHUNK_DIM_Z + dtid.x)*MAP_DATA_DIM_Y + dtid.y] = voxels;
}


[numthreads(CHUNK_THREADS_X, CHUNK_THREADS_Y, CHUNK_THREADS_Z)]
void ClearMapBuffers(uint3 dtid : SV_DispatchThreadID) 
{
	// one thread per LOD2 voxel.
	// dtid corresponds directly to the index of MVLOD2
	MapVoxelsLOD2[getLODIndex(dtid, 1)] = EmptyVoxel;
	MapVoxelsLOD4[getLODIndex(dtid, 2)] = EmptyVoxel;
}




//
// Not in use
//
float Perlin2D(float2 P)
{
	P = P * 2 + float2(5000, 5000);

	//  https://github.com/BrianSharpe/Wombat/blob/master/Perlin2D.glsl

	// establish our grid cell and unit position
	float2 Pi = floor(P);
	float4 Pf_Pfmin1 = P.xyxy - float4(Pi, Pi + 1.0);

	// calculate the hash
	float4 Pt = float4(Pi.xy, Pi.xy + 1.0);

	Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;
	Pt += float2(26.0, 161.0).xyxy;
	Pt *= Pt;
	Pt = Pt.xzxz * Pt.yyww;

	float4 hash_x = frac(Pt * (1.0 / 951.135664));
	float4 hash_y = frac(Pt * (1.0 / 642.949883));

	// calculate the gradient results
	float4 grad_x = hash_x - 0.49999;
	float4 grad_y = hash_y - 0.49999;
	float4 grad_results = rsqrt(grad_x * grad_x + grad_y * grad_y) * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);

	// Classic Perlin Interpolation
	grad_results *= 1.4142135623730950488016887242097;  // scale things to a strict -1.0->1.0 range  *= 1.0/sqrt(0.5)

	float2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);
	float4 blend2 = float4(blend, float2(1.0 - blend));

	return dot(grad_results, blend2.zxzx * blend2.wwyy);
}




/// Portions of the above program are derived from code that is licensed as follows:
// Perlin Noise Functions --

//
//	Code repository for GPU noise development blog
//	http://briansharpe.wordpress.com
//	https://github.com/BrianSharpe
//
//	I'm not one for copyrights.  Use the code however you wish.
//	All I ask is that credit be given back to the blog or myself when appropriate.
//	And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)
//	Thanks!
//
//	Brian Sharpe
//	brisharpe CIRCLE_A yahoo DOT com
//	http://briansharpe.wordpress.com
//	https://github.com/BrianSharpe
//

